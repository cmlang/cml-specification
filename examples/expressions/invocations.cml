// Invoking own queries in contracts:

singleton store: Store;

contract of command ItemCatalog.add(item: Item)
{
    // Observe that commands cannot be invoked (only queries can):
    // - before/on pre-conditions;
    // - after/on post-conditions;
    // - on return statements.

    require not contains(item); // contains() defined in ItemCatalog itself.

    ensure store.items | includes item;
}

// Invoking operations of collaborators in contracts:

collaborator stock: Stock; // Stock interface has operations contains() and add()

contract of command ItemCatalog.addItem(item: Item)
{
    require not stock.contains(item);

    // The return value if any is not relevant:
    invoke stock.add(item);

    // Observe that, in this case, there is no need to specify a post-condition.
    // Implicitly the pre-condition is: verify that stock.add(item) is invoked.
}

// Invoking operations that return values:

contract of command ItemCatalog.addItems(items: Item*): Boolean
{
    require not stock.contains(items);

    // Observe that stock.add(item) cannot be invoked in the return clause,
    // because the return may occur after a post-condition;

    let add_count = stock.add(item);

    return add_count = (items | count);
}

// Invalid invocations in post-conditions:

contract of command ItemCatalog.addItems(items: Item*)
{
    require not stock.contains(items);

    let add_count = stock.add(item);

    // The following post-condition is invalid
    // because return value of add() cannot be guaranteed by this contract:
    ensure add_count = (items | count);
}

contract of command ItemCatalog.addItems(items: Item*): Boolean
{
    require not stock.contains(items);

    let add_count = stock.add(item);

    // Valid because add_count is not being used in a precondition:
    return add_count = (items | count);
}
