
interface Livir
{
    query searchBooks(keywords: String): Book*;

    command createOrder(): Order;
    command addToOrder(order: Order, book: Book, quantity: Integer);
    command removeFromOrder(order: Order, book: Book);
    command completeOrder(order: Order, customer: Customer, address: Address);

    query getOrderItems(order: Order): Item*;

    command raiseBookPrice(percentage: Decimal);
}

singleton bookStore: BookStore;

contract of query Livir.searchBooks(keywords: String): Book*
{
    let /(\s*(<words>\w+)\s*)+/ = keywords;

    require (words | count) > 0;

    return for book in bookStore.books, word in words
        | select book.title = /.*(<word>).*/
        | yield unique book;
}

contract of command Livir.addToOrder(order: Order, book: Book, quantity: Integer)
{
    require
    {
        bookStore.orders | includes order;
        bookStore.books | includes book;
    }

    // Observe that, if both given clauses are mutually exclusive,
    // then their post-conditions may have contradictions.
    // Otherwise, they will be verified together and may not contradict each other.

    given order.items.book | excludes book
    {
        let item = new Item;

        ensure
        {
            item.book = book;
            item.quantity = quantity;
            order.items | includes item;
        }
    }

    given order.items.book | includes book
    {
        let
        {
            existingItem = for item in order.items | select first item.book = book;
            newQuantity = existingItem.quantity + quantity;
        }

        ensure existingItem.quantity = newQuantity;
    }
}

contract of command Livir.removeFromOrder(order: Order, book: Book)
{
    require
    {
        bookStore.orders | includes order;
        order.items.book | includes book;
    }

    let items = for item in order.items | select item.book = book;

    ensure order.items | excludes items;
}

contract of query Livir.getOrderItems(order: Order): Item*
{
    require bookStore.orders | includes order;

    return order.items;
}

contract of command Livir.raiseBookPrice(percentage: Decimal)
{
    for book in bookStore.books
    {
        let newPrice = book.price * percentage;

        ensure book.price = newPrice;
    }

    // Observe that no pre-conditions or invocations may occur after this point,
    // since there are post-conditions defined before this point.
}

concept BookStore
{
    books: Book+;
    books[isbn]: Book?;
    books[genre]: Book*;

    customers: Customer*;
    orders: Order*;

    /goldCustomers: Customer* = customers | select totalSales > 1000;

    /orderedBooks: Book* = orders.items.book;
}

association StoreBooks
{
    BookStore.books: Book+;
    BookStore.books[isbn]: Book?;
    BookStore.books[genre]: Book*;
}

concept Customer
{
    addresses: ordered Address+;
    orders: Order*;

    /totalSales: Number = orders | collect result += total;
}

concept Address;

concept Book
{
    isbn: String;
    title: String;
    price: Decimal;
    quantity: Integer = 0;

    genre: Genre;
    items: Item*;
}

concept Genre
{
    name: String;
}

invariants of Book
{
    price > 0;
}

concept Order
{
    items: Item+;
    customer: Customer;
    payment: Payment?;
    delivery: Delivery?;

    /total: Number = items | collect result += item.amount;
}

concept Delivery
{
    weekDay: WeekDay;
    address: Address;
}

enum WeekDay { Sunday; Monday; Tuesday; Wednesday; Thursday; Friday; Saturday; }

invariants of Order
{
    customer.addresses | includes delivery.address;
}

concept Item
{
    quantity: Integer;

    order: Order;
    book: Book;

    /unitPrice: Decimal = book.price;
    /amount: Decimal = quantity * unitPrice;
}

concept Payment
{
    order: Order;
}

association CustomerOrder
{
    Order.customer: Customer;
    Customer.orders: Order*;
}

association OrderItem
{
    Item.order: Order;
    Order.items: Item*;
}

association BookItem
{
    Item.book: Book;
    Book.items: Item*;
}

association OrderPayment
{
    Payment.order: Order;
    Order.payment: Payment?;
}
