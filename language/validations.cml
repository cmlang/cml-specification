
// Name Conflicts

command validateNameConflicts(element: NamedElement)
{
    let conflicts = findLocalConflictsFor(element);

    given conflits invoke reportNameConflict(element, conflicts);
}

// Primitive Types

command validatePrimitiveType(type: Type)
{
    given primitiveTypes | excludes type.name
        invoke reportUnknownType(type);
}

const primitiveTypes = [
    "Boolean", "Integer", "Decimal", "String", "Regex",
    "Byte", "Short", "Long", "Float", "Double", "Char"
];

// Type Required

command validateTypeRequired(element: TypedElement)
{
    given element.typeRequired
    {
        require element.typeAllowed;

        given not element.type
            invoke reportTypeRequired(element);
    }
}

// Type Not Allowed

command validateTypeNotAllowed(element: TypedElement)
{
    given not element.typeAllowed
    {
        require not element.typeRequired;

        given element.type
            invoke reportTypeNotAllowed(element);
    }
}
