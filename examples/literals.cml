@concept Literals
{
    // Boolean:
    aTrueBoolean: Boolean = true;
    aFalseBoolean: Boolean = false;

    // Integer (32-bit signed two's complement integer in Java/C#/C/C++; Number in JavaScript):
    positiveInteger: Integer = 123; // alternatively: +123
    negativeInteger: Integer = -123;
    anIntegerWithExponent: Integer = 123e10;

    // Decimal (arbitrary precision arithmetic)
    // BigDecimal in Java; decimal in C#; Number in JavaScript; decimal128 in C++ ???):
    positiveDecimal: Decimal = 123.45; // alternatively: +123.45
    negativeDecimal: Decimal = -123.45;
    aDecimalWithExponent: Decimal = 123.45e10;
    aDecimalWithNegativeExponent: Decimal = 123.45e-10;

    // String (16-bit Unicode character sequences in Java/C#/C/C++/JavaScript):
    aString: String = "Hello \x01FF \" \n"; // See char escaping below.

    // Regular Expression:
    words: Regex = /(\s*(?<words>\w+)\s*)+/;

    // Byte (8-bit signed two's complement integer in Java/C#/C/C++; Number in JavaScript):
    minByte: Byte = -128b;
    maxByte: Byte = 127b; // alternatively: +127b

    // Short (16-bit signed two's complement integer in Java/C#/C/C++; Number in JavaScript):
    minShort: Short = -32768s;
    maxShort: Short = 32767s; // alternatively: +32767s

    // Long (64-bit signed two's complement integer in Java/C#/C/C++; Number in JavaScript):
    positiveInteger: Long = 123l; // alternatively: +123l
    negativeInteger: Long = -123l;
    anIntegerWithExponent: Long = 123e10l;

    // Float (32-bit IEEE 754 floating point in Java/C#/C/C++; Number in JavaScript):
    positiveFloat: Float = 123.45f; // alternatively: +123.45f
    negativeFloat: Float = -123.45f;
    aFloatWithExponent: Float = 123.45e10f;

    // Double (64-bit IEEE 754 floating point in Java/C#/C/C++; Number in JavaScript):
    positiveDouble: Double = 123.45d; // alternatively: +123.45d
    negativeDouble: Double = -123.45d;
    aDoubleWithExponent: Double = 123.45e10d;

    // Char (16-bit Unicode character in Java/C#/C/C++/JavaScript):
    aCharacter: Char = 'a';
    singleQuote: Char = \';
    doubleQuote: Char = \";
    backslash: Char = \\;
    nullChar: Char = \0;
    alert: Char = \a;
    backspace: Char = \b;
    formFeed: Char = \f;
    newLine: Char = \n;
    carriageReturn: Char = \r;
    horizontalTab: Char = \t;
    verticalTab: Char = \v;
    unicode: Char = \x01FF;
}
