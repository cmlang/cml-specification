// Using a stack to exemplify contracts:

concept Item;

interface Stack
{
    query isEmpty(): Boolean;
    query isFull(): Boolean;
    query getTopItem(): Item;

    command putOnTop(item: Item);
    command removeFromTop(): Item;
}

concept ItemStore
{
    items: sequence of Item[0..10];
}

singleton store: ItemStore;

// Contract of query:

contract of query Stack.isEmpty(): Boolean
{
    return (store.items | count) = 0;
}

contract of query Stack.isFull(): Boolean
{
    return (store.items | count) = (store.items | max count)
}

contract of query Stack.getTopItem(): Item
{
    require not isEmpty(); // Pre-conditions may use other queries.

    return store.items | first;
}

// Contract of command:

contract of command Stack.putOnTop(item: Item)
{
    require not isFull();

    ensure (store.items | first) = item;
}

contract of command Stack.removeFromTop(): Item
{
    // Observe that no pre-condition was explicitly defined,
    // but one has to hold from getTopItem(), which is "not isEmpty()".

    // Observe also that the given clause below is necessary.
    // Putting the expression "item = getTopItem()" inside the "ensure" block
    // would cause a contradiction between the expressions
    // "store.items | excludes item" (from this contract) and
    // "item = (store.items | first)" (from the getTopItem() contract)

    given item = getTopItem() // Post-conditions may also use queries.
    {
        ensure store.items | excludes item;

        return item; // Must always come last.
    }

    // An "else" clause is not necessary in this case,
    // because the given clause will always evaluate to true.
}
