-- As an abstract concept,
-- no direct instances of Shape are ever created.
abstract concept Shape
{
    -- A derived property without an expression is considered abstract.
    -- Only abstract concepts may have abstract properties.
    /area: Double;

    -- Abstract concepts may also have concrete properties:
    color: String;
}

-- All instances of Circle are in turn instances of Shape.
concept Circle: Shape
{
    radius: Double;

    -- In order to be considered a concrete concept,
    -- Circle must redefine the abstract properties inherited from Shape.
    /area = 3.14159 * radius ^ 2;

    -- Circle may also redefine concrete properties of Shape.
    -- However, the redefinition is not required in this case.
    color = "Blue";
}

concept UnitCircle: Circle
{
    -- Observe below that the redefinition of an abstract property
    -- may be concrete, that is, it does not have to be derived
    -- as it was done in Cicle.
    area = 3.14159;

    -- In the case above, however, it is desirable to redefine "area"
    -- as a derived property, in order to guarantee area's value
    -- cannot be modified after instantiation.
    -- This is done with the redefinition of "radius" below.
    -- Notice that, in Circle, radius was concrete,
    -- but its redefinition below makes it derived.
    -- That's allowed in CML just as the other way around,
    -- as it was done with "area" above.
    /radius = 1;
}
