
// Model (Abstract Syntax)

abstract concept Scope: ModelElement
{
    elements: list of ModelElement*;
    /namedElements: list of NamedElement* = elements;
}

association ScopeElement
{
    Scope.elements: ModelElement*;
    ModelElement.parentScope: Scope?;
}

// Validator (Well-Formedness Rules)

query findElement(name: String, scope: Scope): NamedElement?
{
    require not name = /\s*/;

    let element = for e in scope.namedElements
        | select first e.name = name;

    given not element and scope.parentScope
        return findElement(name, scope.parentScope);

    return element;
}

query findLocalConflicts(element: NamedElement): list of NamedElement*
{
    let scope = element.scope;

    return for e in scope.namedElements | select e != element | select e.name = element.name;
}
